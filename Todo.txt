ROBUST OPTIMIZATION PRESENTATION
- Conseguir rodar para mais de um intervalo de robustez
	- Geracao dos y para cada intervalo somando Gamma

- Politicas de reabastecimento:
	- A cada x dias
	- Dias especificos [1, 3, 6, 8, 9, 14] etc...

- Colocar um upper bound para a variavel de reposicionamento
	- UB = a máxima demanda do intervalo
	
- Rodar varios experimentos variando:
	- Variando o erro de forecast de demanda
	- Valores de gamma [0, 0.5, 1, 1.5, ]
	- Variando os dias do scenario (dia 100 ao 200), (300 ao 400)
	
- Para cada experimento armazenar o valor de r decidido em t0 para cada iteração

- MDS

SOBRE O HORIZONTE DE PLANEJAMENTO
- O horizonte de planejamento será 30 dias, com periodos robustos de 5 dias.
- O planejamento será executado iterativamente para cada 1 desses 30 dias.
    - A cada iteração serão planejados 30 dias para a frente. Por exemplo:
        - No planejamento do dia 1, o modelo será criado do dia 1 ao 30
        - No planejamento do dia 2, o modelo será criado do dia 2 ao 31
        - No planejamento do dia 3, o modelo será criado do dia 3 ao 32
        - ...
- Os dias em que pode ser feito um reposicionamento (compra) serão definidos antes do inicio da simulação e serão os mesmos para tudo o experimento. Deve ser parametrizável. Exemplo:
    - Compras possiveis a cada 2 dias [0, 2, 4, 6, 8 ...] independentemente do dia de planejamento, esses dias são os únicos que dá pra comprar.
    - Compras possiveis em [1, 5, 7, 8, 10, 14 ...]

- O intervalo de robustes debe ir deslocandose com o dia atual de planejamento. Por exemplo, se o intervalo é 5 dias:
    - No dia 1 os intervalos serão [1-4] [5-9] [10-14] ...
    - No dia 2 os intervalos serão [2-5] [6-10] [11-15] ...
    - ...

TODO
General:
- Colocar o random seed no main

ProblemData:
- Criar dataset com todos os dias (ok)
- Criar metodo no problem data para gerar os valores de y separadamente.(ok)
    - Os valores de Y debem somar \Gamma para cada intervalo robusto. (ok)
- Parametrizar o erro do forecast da demanda.(ok)
- Calcular dois valores de forecast de demanda: (ok)
    - Usando os Y para o solver robusto (ok)
    - Sem usar os Y para o solver deterministico. (ok)

Solvers
- O problemdata deve ser gerenciado no main.py (não sempre)
- Colocar no solver robusto a demanda como uma variavel e fixar os bounds dela na criação, usando o valor calculado para Y (ok)
- O metodo solve de ambas clases deve receber o dia inicial como parametro. Esse método sólo ira rodar um dia (ok)
- No caso do solver robusto, adicionar um parametro ao metodo solve, para controlar quantas rodadas devem ser feitas. Sempre retornar a pior. (ok)
- O metodo solve dos solver deve retornar um ProblemSolution. Os problem solutions deben ser gerenciados no main.py (ok)
- Implementar a politica de reposicionamente parametrizavel. Colocar um upper bound para essa variavel. (ok)

Output
- Escolher uma biblioteca de javascript para visualização de dados.
- Em base a biblioteca escolhida, definir um formato de saida para o resultado:
    - Para cada combinação de Gamma e Erro armazenar o valor da FO e Reposicionamento em t0 para cada dia de planejamento.
- Tentar montar um primeiro gráfico

Extras
- Montar uma interface Web que permita inserir alguns parâmetros e executar a simulação
- Criar gráficos que atualizem de forma asincrona, assim que os resultado de cada dia vão ficando disponiveis.

NOTAS
- Rodar a cada instante (dia a dia no nosso caso) emula o caso real, onde nova informação chega, um novo forecast de demanda é calculado e a estrategia é reajustada.
- O que debe acontecer para que o robusto supere ao deterministico?
    - Com muita incerteça, o robusto deberia começar a ganhar (cenários mais nervosos)



	
	

	

	